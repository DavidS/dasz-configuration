#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

zetbox_facade_cls_calls_ - Munin plugin to monitor the number of facade calls by object class on a zetbox instance

=head1 CONFIGURATION

Link the plugin as zetbox_facade_cls_calls_INSTANCENAME and set PERFMON_URL in the environment via plugins-conf.d

=head1 VERSION

  1.0.0

=head1 AUTHOR

Copyright (C) 2013 David Schmitt <david@dasz.at>

Based on the users plugin by Michael Kaiser tools (at) micha (dot) de and Nicolai Langfeldt.

=head1 LICENSE

GPLv2

=cut

use File::Basename;
use LWP::Simple;
use Munin::Plugin;

basename($0) =~ /^zetbox_facade_cls_calls_(.*)$/;
my $instance = $1;

my $url = $ENV{'PERFMON_URL'};
my $counters = get($url) or die "Failure when retrieving data from $url: $!";
my %data;

foreach my $key (grep /\/.*GetList(Of)?Calls:/, split /\r?\n/, $counters) {
    $key =~ /^(.*)\/(.*)Calls: (\d*)$/;
    my ($class, $call, $count) = ($1, $2, int($3));
    $call = 'GetList';
    $data{clean_fieldname("${call}_${class}")} += $count;
}

my $fake_host = $ENV{'FAKE_HOST'};

if ( defined($ARGV[0]) ) {
    if ( $ARGV[0] eq "config" ) {
        print "graph_title zetbox facade calls by class: $instance\n";
        print "graph_args --base 1000 -l 0\n";
        print "graph_vlabel calls/s\n";
        print "graph_category zetbox\n";
        if ($fake_host) {
			print "host_name ${fake_host}\n"
        }

        print "total.label total calls\n";
        print "total.info number of calls to the http facade\n";
        print "total.draw LINE2\n";
        print "total.type DERIVE\n";
        print "total.min 0\n";
        print "total.colour 333333\n";

        my $counter = 0;

        for (sort { ($data{$b} <=> $data{$a}) or ($a cmp $b) } keys %data) {
            $counter++;

            /^([^_]*)_(.*)$/;
            my ($graph, $call) = ($2, $1);

            print "${graph}.label $graph calls\n";
            print "${graph}.info number of $graph calls\n";
            print "${graph}.type DERIVE\n";
            print "${graph}.min 0\n";

            if ($counter > 10) {
                print "${graph}.draw LINE0\n";
                print "${graph}.colour FFFFFF\n";
                print "${graph}.graph no\n";
            } else {
                print "${graph}.draw AREASTACK\n";
                #print "${graph}.colour $graphs{$call}->{colour}\n";
            }
        }

        exit 0;
    }
}

my $total = 0;
for my $key (keys %data) {
    $key =~ /^([^_]*)_(.*)$/;
    my ($graph, $call) = ($2, $1);

    print "${graph}.value $data{$key}\n";
    $total += $data{$key};
}
print "total.value $total\n";
