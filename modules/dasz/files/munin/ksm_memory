#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

ksm_memory - Monitor Kernel Samepage Merging efficiency on a system

=head1 APPLICABLE SYSTEMS

Requires Linux kernel with CONFIG_KSM=y (available since 2.6.32).

=head1 CONFIGURATION

None needed

=head1 INTERPRETATION

See http://www.linux-kvm.org/page/KSM for more info on the displayed values.

=head1 BUGS

None known.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf

=head1 VERSION

  $Id$

=head1 AUTHOR

Copyright (C) 2014 David Schmitt <david@dasz.at>

Based on the "users" plugin:

Copyright (C) 2004-2008.

Original version by Michael Kaiser tools (at) micha (dot) de.
Modified and made more generic by Nicolai Langfeldt, 2006

=head1 LICENSE

GPLv2

=cut

use Munin::Plugin;

if ( defined($ARGV[0])) {
    if ($ARGV[0] eq 'autoconf') {
        open RUN, "</sys/kernel/mm/ksm/run";
        my $run = <RUN>;
        close RUN;
        print "no\n" if $run eq "0\n";
        print "yes\n" if $run eq "1\n";
        exit 0;
    }

    if ( $ARGV[0] eq "config" ) {
        print "graph_title Kernel Samepage Merging\n";
        print "graph_args --base 1024 -l 0\n";
        print "graph_vlabel bytes\n";
        print "graph_category system\n";
        print "graph_printf %3.0lf\n";
        print "shared.label memory used\n";
        print "shared.draw AREASTACK\n";
        print "shared.info how many shared pages are being used\n";
        print "shared.colour 00FF00\n";
        print "sharing.label memory saved\n";
        print "sharing.draw AREASTACK\n";
        print "sharing.info how many more sites are sharing them i.e. how much saved\n";
        print "sharing.colour 00FFFF\n";
        print "unshared.label potential\n";
        print "unshared.draw LINE1\n";
        print "unshared.info how many pages unique but repeatedly checked for merging\n";
        print "unshared.colour 0000FF\n";
        print "volatile.label volatile\n";
        print "volatile.draw LINE1\n";
        print "volatile.info how many pages changing too fast to be placed in a tree\n";
        print "volatile.colour FF0000\n";
        foreach my $field (qw(shared sharing unshared volatile)) {
            print_thresholds($field);
        }
        exit 0;
    }
}

foreach my $field (qw(shared sharing unshared volatile)) {
    open SYS, "</sys/kernel/mm/ksm/pages_$field";
    my $value = <SYS>;
    chomp $value;
    $value *= 4096; # pages to bytes
    close SYS;
    print "$field.value $value\n";
}

# vim:syntax=perl
